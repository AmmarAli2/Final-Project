
Final Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000059e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000059e  00000612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000061e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000650  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000137e  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000093d  00000000  00000000  00001b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ab1  00000000  00000000  00002447  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001bc  00000000  00000000  00002ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e9  00000000  00000000  000030b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a11  00000000  00000000  0000369d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000040ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 cd 02 	jmp	0x59a	; 0x59a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
 */ 
#include "main.h"

int main(void)
{
	PWM0_Fast_Initialize();
  92:	0e 94 4b 02 	call	0x496	; 0x496 <PWM0_Fast_Initialize>
	LCD_Initialize();
  96:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Initialize>
	LCD_Clear();
  9a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_Clear>
	uint8_t dutycycle = 50;
	/* Replace with your application code */
	while(1)
	{	
		PWM0_Fast_SetDutyCycle(dutycycle);
  9e:	82 e3       	ldi	r24, 0x32	; 50
  a0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <PWM0_Fast_SetDutyCycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	83 ed       	ldi	r24, 0xD3	; 211
  a8:	90 e3       	ldi	r25, 0x30	; 48
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x22>
  b4:	00 00       	nop
		_delay_ms(1000);
			LCD_Clear();
  b6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_Clear>
			LCD_Write_Number(dutycycle);
  ba:	62 e3       	ldi	r22, 0x32	; 50
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Write_Number>
			LCD_Write_String((uint8_t*)" % DC 12Mhz");
  c6:	80 e6       	ldi	r24, 0x60	; 96
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 39 01 	call	0x272	; 0x272 <LCD_Write_String>
  ce:	e7 cf       	rjmp	.-50     	; 0x9e <main+0xc>

000000d0 <LCD_Write_Command>:
void LCD_Clear(void)
{
	LCD_Write_Command(0x01);//Clear Display
}
void LCD_Write_Command(uint8_t command)
{
  d0:	cf 93       	push	r28
  d2:	c8 2f       	mov	r28, r24
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_RS, LCD_LOW);//Choose Control Register
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_RW, LCD_LOW);//Choose Write on LCD
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	62 e0       	ldi	r22, 0x02	; 2
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	63 e0       	ldi	r22, 0x03	; 3
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_SetPinValue>
	//Send High Nibble First
	PORTA = ((command)& 0xF0) | (PORTA & 0x0F);
  f2:	8b b3       	in	r24, 0x1b	; 27
  f4:	9c 2f       	mov	r25, r28
  f6:	90 7f       	andi	r25, 0xF0	; 240
  f8:	8f 70       	andi	r24, 0x0F	; 15
  fa:	89 2b       	or	r24, r25
  fc:	8b bb       	out	0x1b, r24	; 27
	//Send High to Low Pulse
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);//Disable LCD
  fe:	41 e0       	ldi	r20, 0x01	; 1
 100:	63 e0       	ldi	r22, 0x03	; 3
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_SetPinValue>
 108:	8f e9       	ldi	r24, 0x9F	; 159
 10a:	9f e0       	ldi	r25, 0x0F	; 15
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_Write_Command+0x3c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_Write_Command+0x42>
 112:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	63 e0       	ldi	r22, 0x03	; 3
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_SetPinValue>
	//Send Low Nibble First
	PORTA = ((command<<4)& 0xF0) | (PORTA & 0x0F);
 11e:	20 e1       	ldi	r18, 0x10	; 16
 120:	c2 9f       	mul	r28, r18
 122:	c0 01       	movw	r24, r0
 124:	11 24       	eor	r1, r1
 126:	9b b3       	in	r25, 0x1b	; 27
 128:	9f 70       	andi	r25, 0x0F	; 15
 12a:	89 2b       	or	r24, r25
 12c:	8b bb       	out	0x1b, r24	; 27
	//Send High to Low Pulse
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);//Disable LCD
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	63 e0       	ldi	r22, 0x03	; 3
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_SetPinValue>
 138:	8f e9       	ldi	r24, 0x9F	; 159
 13a:	9f e0       	ldi	r25, 0x0F	; 15
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_Write_Command+0x6c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_Write_Command+0x72>
 142:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	63 e0       	ldi	r22, 0x03	; 3
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_SetPinValue>
 14e:	8f e1       	ldi	r24, 0x1F	; 31
 150:	9e e4       	ldi	r25, 0x4E	; 78
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_Write_Command+0x82>
 156:	00 c0       	rjmp	.+0      	; 0x158 <LCD_Write_Command+0x88>
 158:	00 00       	nop
	_delay_ms(5);
}
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <LCD_Initialize>:

#include "LCD_Private.h"

void LCD_Initialize(void)
{
	DIO_SetPinDirection(LCD_CTRL_PRT, LCD_RS, LCD_OUT);
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PRT, LCD_RW, LCD_OUT);
 168:	41 e0       	ldi	r20, 0x01	; 1
 16a:	62 e0       	ldi	r22, 0x02	; 2
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PRT, LCD_EN, LCD_OUT);
 172:	41 e0       	ldi	r20, 0x01	; 1
 174:	63 e0       	ldi	r22, 0x03	; 3
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_SetPinDirection>
	
	DIO_SetPinDirection(LCD_DATA_PRT, LCD_D4, LCD_OUT);
 17c:	41 e0       	ldi	r20, 0x01	; 1
 17e:	64 e0       	ldi	r22, 0x04	; 4
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_DATA_PRT, LCD_D5, LCD_OUT);
 186:	41 e0       	ldi	r20, 0x01	; 1
 188:	65 e0       	ldi	r22, 0x05	; 5
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_DATA_PRT, LCD_D6, LCD_OUT);
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	66 e0       	ldi	r22, 0x06	; 6
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_DATA_PRT, LCD_D7, LCD_OUT);
 19a:	41 e0       	ldi	r20, 0x01	; 1
 19c:	67 e0       	ldi	r22, 0x07	; 7
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_SetPinDirection>

	LCD_Write_Command(0x33);
 1a4:	83 e3       	ldi	r24, 0x33	; 51
 1a6:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Write_Command>
	LCD_Write_Command(0x32);
 1aa:	82 e3       	ldi	r24, 0x32	; 50
 1ac:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Write_Command>
	LCD_Write_Command(0x28);//4-Bit Mode
 1b0:	88 e2       	ldi	r24, 0x28	; 40
 1b2:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Write_Command>
	LCD_Write_Command(0x01);//Clear Display
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Write_Command>
	LCD_Write_Command(0x02);//Return Home
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Write_Command>
	LCD_Write_Command(0x0C);//Display on, Cursor off
 1c2:	8c e0       	ldi	r24, 0x0C	; 12
 1c4:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Write_Command>
	LCD_Write_Command(0x06);//Increment Cursor Right
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Write_Command>
 1ce:	8f e3       	ldi	r24, 0x3F	; 63
 1d0:	9f e1       	ldi	r25, 0x1F	; 31
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCD_Initialize+0x74>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCD_Initialize+0x7a>
 1d8:	00 00       	nop
 1da:	08 95       	ret

000001dc <LCD_Clear>:
	
	_delay_ms(2);
}
void LCD_Clear(void)
{
	LCD_Write_Command(0x01);//Clear Display
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Write_Command>
 1e2:	08 95       	ret

000001e4 <LCD_Write_Character>:
	_delay_ms(1);
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
	_delay_ms(5);
}
void LCD_Write_Character(uint8_t character)
{
 1e4:	cf 93       	push	r28
 1e6:	c8 2f       	mov	r28, r24
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_RS, LCD_HIGH);//Choose Data Register
 1e8:	41 e0       	ldi	r20, 0x01	; 1
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_RW, LCD_LOW);//Choose Write on LCD
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	62 e0       	ldi	r22, 0x02	; 2
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	63 e0       	ldi	r22, 0x03	; 3
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_SetPinValue>
	//Send High Nibble First
	PORTA = ((character)& 0xF0) | (PORTA & 0x0F);
 206:	8b b3       	in	r24, 0x1b	; 27
 208:	9c 2f       	mov	r25, r28
 20a:	90 7f       	andi	r25, 0xF0	; 240
 20c:	8f 70       	andi	r24, 0x0F	; 15
 20e:	89 2b       	or	r24, r25
 210:	8b bb       	out	0x1b, r24	; 27
	//Send High to Low Pulse
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);//Disable LCD
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	63 e0       	ldi	r22, 0x03	; 3
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_SetPinValue>
 21c:	8f e9       	ldi	r24, 0x9F	; 159
 21e:	9f e0       	ldi	r25, 0x0F	; 15
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <LCD_Write_Character+0x3c>
 224:	00 c0       	rjmp	.+0      	; 0x226 <LCD_Write_Character+0x42>
 226:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
 228:	40 e0       	ldi	r20, 0x00	; 0
 22a:	63 e0       	ldi	r22, 0x03	; 3
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_SetPinValue>
	//Send Low Nibble First
	PORTA = ((character<<4)& 0xF0) | (PORTA & 0x0F);
 232:	20 e1       	ldi	r18, 0x10	; 16
 234:	c2 9f       	mul	r28, r18
 236:	c0 01       	movw	r24, r0
 238:	11 24       	eor	r1, r1
 23a:	9b b3       	in	r25, 0x1b	; 27
 23c:	9f 70       	andi	r25, 0x0F	; 15
 23e:	89 2b       	or	r24, r25
 240:	8b bb       	out	0x1b, r24	; 27
	//Send High to Low Pulse
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);//Disable LCD
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	63 e0       	ldi	r22, 0x03	; 3
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_SetPinValue>
 24c:	8f e9       	ldi	r24, 0x9F	; 159
 24e:	9f e0       	ldi	r25, 0x0F	; 15
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_Write_Character+0x6c>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_Write_Character+0x72>
 256:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	63 e0       	ldi	r22, 0x03	; 3
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_SetPinValue>
 262:	8f e1       	ldi	r24, 0x1F	; 31
 264:	9e e4       	ldi	r25, 0x4E	; 78
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <LCD_Write_Character+0x82>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <LCD_Write_Character+0x88>
 26c:	00 00       	nop
	_delay_ms(5);
}
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <LCD_Write_String>:
void LCD_Write_String(uint8_t* str)
{
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	ec 01       	movw	r28, r24
	while (*str != '\0')//Termination of any string, NULL character
 278:	09 c0       	rjmp	.+18     	; 0x28c <LCD_Write_String+0x1a>
	{
		LCD_Write_Character(*str);
 27a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_Write_Character>
 27e:	8f e3       	ldi	r24, 0x3F	; 63
 280:	9f e1       	ldi	r25, 0x1F	; 31
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <LCD_Write_String+0x10>
 286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_Write_String+0x16>
 288:	00 00       	nop
		_delay_ms(2);
		str++;
 28a:	21 96       	adiw	r28, 0x01	; 1
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
	_delay_ms(5);
}
void LCD_Write_String(uint8_t* str)
{
	while (*str != '\0')//Termination of any string, NULL character
 28c:	88 81       	ld	r24, Y
 28e:	81 11       	cpse	r24, r1
 290:	f4 cf       	rjmp	.-24     	; 0x27a <LCD_Write_String+0x8>
	{
		LCD_Write_Character(*str);
		_delay_ms(2);
		str++;
	}	
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <LCD_Write_Number>:
void LCD_Write_Number(uint32_t number)
{
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
 2a0:	2f 97       	sbiw	r28, 0x0f	; 15
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	f8 94       	cli
 2a6:	de bf       	out	0x3e, r29	; 62
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
 2ac:	2a e0       	ldi	r18, 0x0A	; 10
 2ae:	ae 01       	movw	r20, r28
 2b0:	4f 5f       	subi	r20, 0xFF	; 255
 2b2:	5f 4f       	sbci	r21, 0xFF	; 255
 2b4:	0e 94 8c 02 	call	0x518	; 0x518 <__ltoa_ncheck>
	char num[15];
	ltoa(number, (uint8_t*)num, 10);
	LCD_Write_String((uint8_t*) num);
 2b8:	ce 01       	movw	r24, r28
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	0e 94 39 01 	call	0x272	; 0x272 <LCD_Write_String>
 2c0:	2f 96       	adiw	r28, 0x0f	; 15
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	f8 94       	cli
 2c6:	de bf       	out	0x3e, r29	; 62
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	cd bf       	out	0x3d, r28	; 61
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <DIO_SetPinDirection>:


//To define direction (Input/Output)
void DIO_SetPinDirection(port Port, pin Pin, direction Direction)
{
	switch(Direction)
 2d2:	44 23       	and	r20, r20
 2d4:	19 f0       	breq	.+6      	; 0x2dc <DIO_SetPinDirection+0xa>
 2d6:	41 30       	cpi	r20, 0x01	; 1
 2d8:	c9 f1       	breq	.+114    	; 0x34c <DIO_SetPinDirection+0x7a>
 2da:	08 95       	ret
	{
		case DIO_INPUT:
		switch (Port)
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	91 f0       	breq	.+36     	; 0x304 <DIO_SetPinDirection+0x32>
 2e0:	28 f0       	brcs	.+10     	; 0x2ec <DIO_SetPinDirection+0x1a>
 2e2:	82 30       	cpi	r24, 0x02	; 2
 2e4:	d9 f0       	breq	.+54     	; 0x31c <DIO_SetPinDirection+0x4a>
 2e6:	83 30       	cpi	r24, 0x03	; 3
 2e8:	29 f1       	breq	.+74     	; 0x334 <DIO_SetPinDirection+0x62>
 2ea:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, Pin);
 2ec:	2a b3       	in	r18, 0x1a	; 26
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_SetPinDirection+0x26>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_SetPinDirection+0x22>
 2fc:	80 95       	com	r24
 2fe:	82 23       	and	r24, r18
 300:	8a bb       	out	0x1a, r24	; 26
			break;
 302:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB , Pin);
 304:	27 b3       	in	r18, 0x17	; 23
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_SetPinDirection+0x3e>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_SetPinDirection+0x3a>
 314:	80 95       	com	r24
 316:	82 23       	and	r24, r18
 318:	87 bb       	out	0x17, r24	; 23
			break;
 31a:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, Pin);
 31c:	24 b3       	in	r18, 0x14	; 20
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_SetPinDirection+0x56>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	6a 95       	dec	r22
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_SetPinDirection+0x52>
 32c:	80 95       	com	r24
 32e:	82 23       	and	r24, r18
 330:	84 bb       	out	0x14, r24	; 20
			break;
 332:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, Pin);
 334:	21 b3       	in	r18, 0x11	; 17
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_SetPinDirection+0x6e>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_SetPinDirection+0x6a>
 344:	80 95       	com	r24
 346:	82 23       	and	r24, r18
 348:	81 bb       	out	0x11, r24	; 17
			break;
 34a:	08 95       	ret
			//#warning "Port or Pin Not Correcrt"
			break;
		}
		break;
		case DIO_OUTPUT:
		switch (Port)
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	89 f0       	breq	.+34     	; 0x372 <DIO_SetPinDirection+0xa0>
 350:	28 f0       	brcs	.+10     	; 0x35c <DIO_SetPinDirection+0x8a>
 352:	82 30       	cpi	r24, 0x02	; 2
 354:	c9 f0       	breq	.+50     	; 0x388 <DIO_SetPinDirection+0xb6>
 356:	83 30       	cpi	r24, 0x03	; 3
 358:	11 f1       	breq	.+68     	; 0x39e <DIO_SetPinDirection+0xcc>
 35a:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, Pin);
 35c:	2a b3       	in	r18, 0x1a	; 26
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_SetPinDirection+0x96>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	6a 95       	dec	r22
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_SetPinDirection+0x92>
 36c:	82 2b       	or	r24, r18
 36e:	8a bb       	out	0x1a, r24	; 26
			break;
 370:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB , Pin);
 372:	27 b3       	in	r18, 0x17	; 23
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_SetPinDirection+0xac>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	6a 95       	dec	r22
 380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_SetPinDirection+0xa8>
 382:	82 2b       	or	r24, r18
 384:	87 bb       	out	0x17, r24	; 23
			break;
 386:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, Pin);
 388:	24 b3       	in	r18, 0x14	; 20
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_SetPinDirection+0xc2>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_SetPinDirection+0xbe>
 398:	82 2b       	or	r24, r18
 39a:	84 bb       	out	0x14, r24	; 20
			break;
 39c:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, Pin);
 39e:	21 b3       	in	r18, 0x11	; 17
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_SetPinDirection+0xd8>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	6a 95       	dec	r22
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_SetPinDirection+0xd4>
 3ae:	82 2b       	or	r24, r18
 3b0:	81 bb       	out	0x11, r24	; 17
 3b2:	08 95       	ret

000003b4 <DIO_SetPinValue>:
	}
}
//To define state (High/Low)
void DIO_SetPinValue(port Port, pin Pin, state State)
{
	switch(State)
 3b4:	44 23       	and	r20, r20
 3b6:	19 f0       	breq	.+6      	; 0x3be <DIO_SetPinValue+0xa>
 3b8:	41 30       	cpi	r20, 0x01	; 1
 3ba:	c9 f1       	breq	.+114    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 3bc:	08 95       	ret
	{
		case DIO_LOW:
		switch (Port)
 3be:	81 30       	cpi	r24, 0x01	; 1
 3c0:	91 f0       	breq	.+36     	; 0x3e6 <DIO_SetPinValue+0x32>
 3c2:	28 f0       	brcs	.+10     	; 0x3ce <DIO_SetPinValue+0x1a>
 3c4:	82 30       	cpi	r24, 0x02	; 2
 3c6:	d9 f0       	breq	.+54     	; 0x3fe <DIO_SetPinValue+0x4a>
 3c8:	83 30       	cpi	r24, 0x03	; 3
 3ca:	29 f1       	breq	.+74     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3cc:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, Pin);
 3ce:	2b b3       	in	r18, 0x1b	; 27
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_SetPinValue+0x26>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	6a 95       	dec	r22
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_SetPinValue+0x22>
 3de:	80 95       	com	r24
 3e0:	82 23       	and	r24, r18
 3e2:	8b bb       	out	0x1b, r24	; 27
			break;
 3e4:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB , Pin);
 3e6:	28 b3       	in	r18, 0x18	; 24
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_SetPinValue+0x3e>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	6a 95       	dec	r22
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_SetPinValue+0x3a>
 3f6:	80 95       	com	r24
 3f8:	82 23       	and	r24, r18
 3fa:	88 bb       	out	0x18, r24	; 24
			break;
 3fc:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, Pin);
 3fe:	25 b3       	in	r18, 0x15	; 21
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	6a 95       	dec	r22
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	80 95       	com	r24
 410:	82 23       	and	r24, r18
 412:	85 bb       	out	0x15, r24	; 21
			break;
 414:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, Pin);
 416:	22 b3       	in	r18, 0x12	; 18
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	80 95       	com	r24
 428:	82 23       	and	r24, r18
 42a:	82 bb       	out	0x12, r24	; 18
			break;
 42c:	08 95       	ret
			//#warning "Port or Pin Not Correcrt"
			break;
		}
		break;
		case DIO_HIGH:
		switch (Port)
 42e:	81 30       	cpi	r24, 0x01	; 1
 430:	89 f0       	breq	.+34     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 432:	28 f0       	brcs	.+10     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 434:	82 30       	cpi	r24, 0x02	; 2
 436:	c9 f0       	breq	.+50     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 438:	83 30       	cpi	r24, 0x03	; 3
 43a:	11 f1       	breq	.+68     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 43c:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, Pin);
 43e:	2b b3       	in	r18, 0x1b	; 27
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	02 c0       	rjmp	.+4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	6a 95       	dec	r22
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44e:	82 2b       	or	r24, r18
 450:	8b bb       	out	0x1b, r24	; 27
			break;
 452:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB , Pin);
 454:	28 b3       	in	r18, 0x18	; 24
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	6a 95       	dec	r22
 462:	e2 f7       	brpl	.-8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 464:	82 2b       	or	r24, r18
 466:	88 bb       	out	0x18, r24	; 24
			break;
 468:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, Pin);
 46a:	25 b3       	in	r18, 0x15	; 21
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	02 c0       	rjmp	.+4      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	6a 95       	dec	r22
 478:	e2 f7       	brpl	.-8      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 47a:	82 2b       	or	r24, r18
 47c:	85 bb       	out	0x15, r24	; 21
			break;
 47e:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, Pin);
 480:	22 b3       	in	r18, 0x12	; 18
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 490:	82 2b       	or	r24, r18
 492:	82 bb       	out	0x12, r24	; 18
 494:	08 95       	ret

00000496 <PWM0_Fast_Initialize>:
{
	SET_BIT(TCCR0, CS02);CLR_BIT(TCCR0, CS01);CLR_BIT(TCCR0, CS00);
}
void PWM0_Fast_Stop(void)
{
	CLR_BIT(TCCR0, CS02);CLR_BIT(TCCR0, CS01);CLR_BIT(TCCR0, CS00);
 496:	87 b3       	in	r24, 0x17	; 23
 498:	88 60       	ori	r24, 0x08	; 8
 49a:	87 bb       	out	0x17, r24	; 23
 49c:	83 b7       	in	r24, 0x33	; 51
 49e:	88 60       	ori	r24, 0x08	; 8
 4a0:	83 bf       	out	0x33, r24	; 51
 4a2:	83 b7       	in	r24, 0x33	; 51
 4a4:	80 64       	ori	r24, 0x40	; 64
 4a6:	83 bf       	out	0x33, r24	; 51
 4a8:	83 b7       	in	r24, 0x33	; 51
 4aa:	80 62       	ori	r24, 0x20	; 32
 4ac:	83 bf       	out	0x33, r24	; 51
 4ae:	83 b7       	in	r24, 0x33	; 51
 4b0:	8f 7e       	andi	r24, 0xEF	; 239
 4b2:	83 bf       	out	0x33, r24	; 51
 4b4:	08 95       	ret

000004b6 <PWM0_Fast_SetDutyCycle>:
}
void PWM0_Fast_SetDutyCycle(uint8_t dutycycle)
{
	#if PWM0_Mode == PWM0_NonInverting
	OCR0 = ((BITS * dutycycle) / 100) - 1;
 4b6:	98 2f       	mov	r25, r24
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	64 e6       	ldi	r22, 0x64	; 100
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__divmodhi4>
 4c2:	61 50       	subi	r22, 0x01	; 1
 4c4:	6c bf       	out	0x3c, r22	; 60
 4c6:	08 95       	ret

000004c8 <__divmodhi4>:
 4c8:	97 fb       	bst	r25, 7
 4ca:	07 2e       	mov	r0, r23
 4cc:	16 f4       	brtc	.+4      	; 0x4d2 <__divmodhi4+0xa>
 4ce:	00 94       	com	r0
 4d0:	07 d0       	rcall	.+14     	; 0x4e0 <__divmodhi4_neg1>
 4d2:	77 fd       	sbrc	r23, 7
 4d4:	09 d0       	rcall	.+18     	; 0x4e8 <__divmodhi4_neg2>
 4d6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__udivmodhi4>
 4da:	07 fc       	sbrc	r0, 7
 4dc:	05 d0       	rcall	.+10     	; 0x4e8 <__divmodhi4_neg2>
 4de:	3e f4       	brtc	.+14     	; 0x4ee <__divmodhi4_exit>

000004e0 <__divmodhi4_neg1>:
 4e0:	90 95       	com	r25
 4e2:	81 95       	neg	r24
 4e4:	9f 4f       	sbci	r25, 0xFF	; 255
 4e6:	08 95       	ret

000004e8 <__divmodhi4_neg2>:
 4e8:	70 95       	com	r23
 4ea:	61 95       	neg	r22
 4ec:	7f 4f       	sbci	r23, 0xFF	; 255

000004ee <__divmodhi4_exit>:
 4ee:	08 95       	ret

000004f0 <__udivmodhi4>:
 4f0:	aa 1b       	sub	r26, r26
 4f2:	bb 1b       	sub	r27, r27
 4f4:	51 e1       	ldi	r21, 0x11	; 17
 4f6:	07 c0       	rjmp	.+14     	; 0x506 <__udivmodhi4_ep>

000004f8 <__udivmodhi4_loop>:
 4f8:	aa 1f       	adc	r26, r26
 4fa:	bb 1f       	adc	r27, r27
 4fc:	a6 17       	cp	r26, r22
 4fe:	b7 07       	cpc	r27, r23
 500:	10 f0       	brcs	.+4      	; 0x506 <__udivmodhi4_ep>
 502:	a6 1b       	sub	r26, r22
 504:	b7 0b       	sbc	r27, r23

00000506 <__udivmodhi4_ep>:
 506:	88 1f       	adc	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	5a 95       	dec	r21
 50c:	a9 f7       	brne	.-22     	; 0x4f8 <__udivmodhi4_loop>
 50e:	80 95       	com	r24
 510:	90 95       	com	r25
 512:	bc 01       	movw	r22, r24
 514:	cd 01       	movw	r24, r26
 516:	08 95       	ret

00000518 <__ltoa_ncheck>:
 518:	bb 27       	eor	r27, r27
 51a:	2a 30       	cpi	r18, 0x0A	; 10
 51c:	51 f4       	brne	.+20     	; 0x532 <__ltoa_ncheck+0x1a>
 51e:	99 23       	and	r25, r25
 520:	42 f4       	brpl	.+16     	; 0x532 <__ltoa_ncheck+0x1a>
 522:	bd e2       	ldi	r27, 0x2D	; 45
 524:	90 95       	com	r25
 526:	80 95       	com	r24
 528:	70 95       	com	r23
 52a:	61 95       	neg	r22
 52c:	7f 4f       	sbci	r23, 0xFF	; 255
 52e:	8f 4f       	sbci	r24, 0xFF	; 255
 530:	9f 4f       	sbci	r25, 0xFF	; 255
 532:	0c 94 9c 02 	jmp	0x538	; 0x538 <__ultoa_common>

00000536 <__ultoa_ncheck>:
 536:	bb 27       	eor	r27, r27

00000538 <__ultoa_common>:
 538:	fa 01       	movw	r30, r20
 53a:	a6 2f       	mov	r26, r22
 53c:	62 17       	cp	r22, r18
 53e:	71 05       	cpc	r23, r1
 540:	81 05       	cpc	r24, r1
 542:	91 05       	cpc	r25, r1
 544:	33 0b       	sbc	r19, r19
 546:	30 fb       	bst	r19, 0
 548:	66 f0       	brts	.+24     	; 0x562 <__ultoa_common+0x2a>
 54a:	aa 27       	eor	r26, r26
 54c:	66 0f       	add	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	88 1f       	adc	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	aa 1f       	adc	r26, r26
 556:	a2 17       	cp	r26, r18
 558:	10 f0       	brcs	.+4      	; 0x55e <__ultoa_common+0x26>
 55a:	a2 1b       	sub	r26, r18
 55c:	63 95       	inc	r22
 55e:	38 50       	subi	r19, 0x08	; 8
 560:	a9 f7       	brne	.-22     	; 0x54c <__ultoa_common+0x14>
 562:	a0 5d       	subi	r26, 0xD0	; 208
 564:	aa 33       	cpi	r26, 0x3A	; 58
 566:	08 f0       	brcs	.+2      	; 0x56a <__ultoa_common+0x32>
 568:	a9 5d       	subi	r26, 0xD9	; 217
 56a:	a1 93       	st	Z+, r26
 56c:	36 f7       	brtc	.-52     	; 0x53a <__ultoa_common+0x2>
 56e:	b1 11       	cpse	r27, r1
 570:	b1 93       	st	Z+, r27
 572:	10 82       	st	Z, r1
 574:	ca 01       	movw	r24, r20
 576:	0c 94 bd 02 	jmp	0x57a	; 0x57a <strrev>

0000057a <strrev>:
 57a:	dc 01       	movw	r26, r24
 57c:	fc 01       	movw	r30, r24
 57e:	67 2f       	mov	r22, r23
 580:	71 91       	ld	r23, Z+
 582:	77 23       	and	r23, r23
 584:	e1 f7       	brne	.-8      	; 0x57e <strrev+0x4>
 586:	32 97       	sbiw	r30, 0x02	; 2
 588:	04 c0       	rjmp	.+8      	; 0x592 <strrev+0x18>
 58a:	7c 91       	ld	r23, X
 58c:	6d 93       	st	X+, r22
 58e:	70 83       	st	Z, r23
 590:	62 91       	ld	r22, -Z
 592:	ae 17       	cp	r26, r30
 594:	bf 07       	cpc	r27, r31
 596:	c8 f3       	brcs	.-14     	; 0x58a <strrev+0x10>
 598:	08 95       	ret

0000059a <_exit>:
 59a:	f8 94       	cli

0000059c <__stop_program>:
 59c:	ff cf       	rjmp	.-2      	; 0x59c <__stop_program>
